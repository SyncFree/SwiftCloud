SwiftCloud: a causally-consistent CRDT object database for client-side apps

This repository contains the prototype database SwiftCloud, described in the
following publications:
1. "Write Fast, Read in the Past: Causal Consistency for Client-side
    Applications"
     by Marek Zawirski, Nuno Preguiça, Sérgio Duarte, Annette Bieniusa,
        Valter Balegas, and  Marc Shapiro,
     in the proceedings of Middleware, 2015, also available in
     extended version as an Inria technical report
     (https://hal.inria.fr/hal-01158370)
2. "SwiftCloud: Fault-Tolerant Geo-Replication Integrated all the Way to the
    Client Machine" (old version, subsumed by 1.)
     by Marek Zawirski, Annette Bieniusa, Valter Balegas, Sérgio Duarte,
        Carlos Baquero, Marc Shapiro, and Nuno Preguiça,
     available as Inria technical report from 2013
    (http://hal.inria.fr/hal-00870225)
This codebase served in the experiments for the publicaiton 1. 

The code is licensed under The Apache License Version 2.0 (LICENSE),
provided in the spirit of CRAPL license (CRAPL-LICENSE), i.e., it is ugly
to read/use and far from production ready.   

=== SwiftCloud crash course ===
TODO

=== Example applications ===
- SwiftSocial - a simple social network application modeled after WaltSocial
- Port of YCSB benchmark
- File system with FUSE bindings

=== Running scripts ===
Deployment scripts for experiments are implemented in Groovy.
The scripts are in scripts/groovy/deployment directory, both deployment classes
definitions (such as SwiftBase.groovy, SwiftSocial2.groovy etc.) and concrete
experiment instances (runsocialmanual.groovy etc.).

To run the scripts, you need:
(1) groovy and ant installed on your machine, and
(2) bin/ directory with compiled sources (e.g., generated by Eclipse by default)
(2) ssh access configured for the target machine.
In the case of EC2 machines used in experiments, the simplest is to configure
your ssh like this:
Host *.compute.amazonaws.com
	StrictHostKeyChecking no
	UserKnownHostsFile=/dev/null
	IdentityFile PATH_TO_SSH_KEY_GOES_HERE

Host *.compute-1.amazonaws.com
	StrictHostKeyChecking no
	UserKnownHostsFile=/dev/null
	IdentityFile PATH_TO_SSH_KEY_GOES_HERE

To run experiments, use scripts from scripts/groovy/swift/deployment
E.g. to run a single swiftsocial experiment manually:
./scripts/groovy/swift/deployment/runsocialmanual.groovy
(edit that example to modify SwiftSocial2 parameters)
E.g. to run a series of experiments oriented at scalability:
./scripts/groovy/swift/deployment/runscalabilitythroughput.groovy


The experiments generate log files. To generate plots from the logs,
use scripts from eval_R/.
e.g. to generate a detailed analysis of a run:
Rscript eval_R/analyze_run.R all <run_logs.tar.gz> [output directory]
e.g. to compare different runs:
use eval_R/compare_runs.R and associated Makefiles
